{% macro folder(folder, display_name)                                       -%}
{# creates a folder structure to group jobs
   param folder:  '<clusterhq-flocker/branchname>'
   param displayName: Name displayed in the jenkins view for this folder     #}
println("creating {{folder}}...")
folder("{{folder}}") { displayName("{{display_name}}") }
{%- endmacro                                                                -%}
{#

#}

{% macro wrappers(v, repo_dir)                                              -%}
{# adds a list of common wrappers to the build jobs                          #}
    wrappers {
      timestamps()
      colorizeOutput()
      timeout {
          absolute(30)
          failBuild()
      }
{% if v.clean_repo %}
      preScmSteps {
          steps {
          shell("sudo rm -rf {{ repo_dir }}")
          }
      }
{% endif %}
    }
{%- endmacro                                                                -%}
{#

#}
{% macro scm(git_url, branch) -%}
{# configures a remote git repository, and merges 'branch' before build
    param: git_url - example: https://github.com/clusterhq/flocker
    param: branch - remote branch name to configure                          #}
    scm {
      git {
        remote {
          name("upstream")
          url("{{git_url}}")
        }
        branch("{{branch}}")
        clean(true)
        createTag(false)
        mergeOptions('upstream', "master")
      }
    }
{%- endmacro                                                                -%}
{#

#}
{% macro publishers(v)                                                      -%}
{# adds a publishers block to the jenkins job configuration, containing:
   an action for archiving artifacts
   an action for archiving junit results
   an action for publishing coverate reports

   param: dictionary containing the job keys
#}
    publishers {
{% if v.archive_artifacts                                                   -%}
{%        for artifact in v.archive_artifacts                                %}
{# v.archive_artifacts typically contain:
   'results.xml', 'coverage.xml', '_trial_temp/trial.log'                    #}
      archiveArtifacts("{{artifact}}")
{%        endfor                                                             %}
{# archives the junit results and publish the test results                   #}
      archiveJunit('results.xml') {
        retainLongStdout(true)
        testDataPublishers {
             allowClaimingOfFailedTests()
             publishTestAttachments()
             publishTestStabilityData()
             publishFlakyTestsReport()
        }
      }
{%      endif                                                               -%}
{%      if v.coverage_report                                                 %}
{# publishes a coverage report, using junit and the cobertura plugin         #}
        cobertura('coverage.xml') {
           onlyStable(false)
           failUnhealthy(true)
           failUnstable(true)
           failNoReports(true)
        }
{%      endif                                                               -%}
    }
{%- endmacro                                                                -%}
{#                                                                           #}
{% macro steps(v)                                                           -%}
{#  builds a list of job steps based on the type of the job:
    ( 'shell', others )
    currently only shell has been implemented.
    params: dictionary containing the job values                             #}
    steps {
{%  for _step in v                                                          -%}
{%    if _step.type=='shell'                                                 %}
    shell("""
{%      for line in _step.cli                                               -%}
      {{ line }}
{%      endfor                                                              -%}
    """)
{%    endif                                                                 -%}
{%  endfor                                                                   %}
    }
{%- endmacro                                                                -%}
{#


#}
{# groov lacks a loop...until ...                                            #}
class Looper {
   private Closure code

   static Looper loop( Closure code ) {
      new Looper(code:code)
   }

   void until( Closure test ) {
      code()
      while (!test()) {
         code()
      }
   }
}

def project = "{{ cfg.project }}"
def git_url = "{{ cfg.git_url }}"
int page = 1
branches = []
{# grab the GitHub token from the jenkins homedir                            #}
String token = new File('/var/lib/jenkins/.github_token').text.trim()

def dashProject = "{{ cfg.project }}".replace('/', '-')

{# Create a basefolder for our project, it should look like:
   '<github username>-<git repository>'                                      #}
{{ folder("${dashProject}","${dashProject}") }}

{# branches contains the passed parameter RECONFIGURE_BRANCH from jenkins    #}
branches << "${RECONFIGURE_BRANCH}"

{# Iterate over every branch, and create folders, jobs                       #}
branches.each {
  println("iterating over branch... ${it}")

{#  swap '/' with '-'                                                        #}
  branchName = "${it}"
  dashBranchName = "${branchName}".replace("/","-")
  println("found branch... ${it}")

{#   create a folder for every branch: /git-username/git-repo/branch         #}
  {{ folder("${dashProject}/${dashBranchName}","${branchName}") }}


{# iterate over every job_type  #}
{% for job_type, job_type_values  in cfg.job_type.iteritems()               -%}
{%  for job_name, job_values  in job_type_values.iteritems()                -%}

{# apply config related to 'run_trial' jobs                                  #}
{%    if job_type == 'run_trial'                                            -%}
{%      for _module in job_values.with_modules                              -%}
{%        set _job_name = job_name + '_' + _module                          -%}
  job("${dashProject}/${dashBranchName}/{{ _job_name }}") {
    parameters {
        textParam("MODULE", "{{ _module }}", "Module to test" )
        textParam("TRIGGERED_BRANCH", "${branchName}", "Branch that triggered this job" )
    }
    label("{{ job_values.on_nodes_with_labels }}")
    {{ wrappers(job_values) }}
    {{ scm("${git_url}", "${branchName}") }}
    {{ steps(job_values.with_steps) }}
    {{ publishers(job_values) }}
  }
{%      endfor                                                               %}
{%    endif                                                                  %}

{# apply config related to 'run_sphinx' jobs                                 #}
{%    if job_type == 'run_sphinx'                                           -%}
{%        set _job_name = job_name                                          -%}
  job("${dashProject}/${dashBranchName}/{{ _job_name }}") {
    parameters {
        textParam("TRIGGERED_BRANCH", "${branchName}", "Branch that triggered this job" )
    }
    label("{{ job_values.on_nodes_with_labels }}")
    {{ wrappers(job_values) }}
    {{ scm("${git_url}", "${branchName}") }}
    {{ steps(job_values.with_steps) }}
  }
{%    endif                                                                  %}

{# apply config related to 'run_acceptance' jobs                             #}
{%    if job_type == 'run_acceptance'                                       -%}
{%        set _job_name = job_name                                          -%}
  job("${dashProject}/${dashBranchName}/{{ _job_name }}") {
    parameters {
        textParam("TRIGGERED_BRANCH", "${branchName}", "Branch that triggered this job" )
    }
    label("{{ job_values.on_nodes_with_labels }}")

{% set repo_dir = "/tmp/workspace/${dashProject}/${dashBranchName}/" + _job_name + "/repo" %}
    {{ wrappers(job_values, repo_dir) }}
    {{ scm("${git_url}", "${branchName}") }}
    {{ steps(job_values.with_steps) }}
  }
{%    endif                                                                  %}

{# apply config related to 'omnbibus' jobs                                   #}
{%    if job_type == 'omnibus'                                              -%}
{%        set _job_name = job_name                                          -%}
  job("${dashProject}/${dashBranchName}/{{ _job_name }}") {
    label("{{ job_values.on_nodes_with_labels }}")
    {{ wrappers(job_values) }}
    {{ scm("${git_url}", "${branchName}") }}
    {{ steps(job_values.with_steps) }}
  }
{%    endif                                                                  %}
{%  endfor                                                                   %}
{% endfor                                                                    %}


{# the multijob is responsible for running all configured jobs in parallel   #}
  multiJob("${dashProject}/${dashBranchName}/_main_multijob") {
    wrappers {
      timestamps()
      colorizeOutput()
    }
      steps {
          shell('rm -rf *')
          phase('parallel_tests') {
              continuationCondition('ALWAYS')
{% for job_type, job_type_values  in cfg.job_type.iteritems()               -%}

{# add the 'run_trial' style jobs                                            #}
{%  if job_type == 'run_trial'                                              -%}
{%    for job_name, job_values  in job_type_values.iteritems()              -%}
{%      for _module in job_values.with_modules                              -%}
{%        set _job_name = job_name + '_' + _module                           %}
              job("${dashProject}/${dashBranchName}/{{_job_name }}")  {
                killPhaseCondition("NEVER")
              }
{%      endfor                                                              -%}
{%    endfor                                                                -%}
{%  endif                                                                    %}

{# add the 'run_sphinx' style jobs                                           #}
{%  if job_type == 'run_sphinx'                                             -%}
{%    for job_name, job_values  in job_type_values.iteritems()              -%}
{%      set _job_name = job_name                                             %}
              job("${dashProject}/${dashBranchName}/{{_job_name }}")  {
                killPhaseCondition("NEVER")
              }
{%    endfor                                                                -%}
{%  endif                                                                    %}

{# add the 'run_acceptance' style jobs                                       #}
{%  if job_type == 'run_acceptance'                                         -%}
{%    for job_name, job_values  in job_type_values.iteritems()              -%}
{%      set _job_name = job_name                                             %}
              job("${dashProject}/${dashBranchName}/{{_job_name }}")  {
                killPhaseCondition("NEVER")
              }
{%    endfor                                                                -%}
{%  endif                                                                    %}

{# add the 'omnibus' style jobs                                              #}
{%  if job_type == 'omnibus'                                                -%}
{%    for job_name, job_values  in job_type_values.iteritems()              -%}
{%      set _job_name = job_name                                             %}
              job("${dashProject}/${dashBranchName}/{{_job_name }}")  {
                killPhaseCondition("NEVER")
              }
{%    endfor                                                                -%}
{%  endif                                                                    %}

{% endfor                                                                    %}
          }
{# we've added the jobs to the multijob, we now need to fetch and archive all
   the artifacts produced by the different jobs                              #}
{% for job_type, job_type_values  in cfg.job_type.iteritems()               -%}
{%  for job_name, job_values  in job_type_values.iteritems()                -%}
{%    for _module in job_values.with_modules                                -%}
{%       set _job_name = job_name + '_' + _module                            %}

{# no every job produces an artifact, so make sure wew don't try to fetch
   artifacts for jobs that don't produce them                                #}
{%      if job_values.archive_artifacts                                     -%}

{%        for artifact in job_values.archive_artifacts                       %}
          copyArtifacts("${dashProject}/${dashBranchName}/{{ _job_name }}") {
          optional(true)
          includePatterns("{{artifact}}")
              targetDirectory('{{ _job_name }}')
              fingerprintArtifacts(true)
              buildSelector {
                  workspace()
              }
          }
{%        endfor                                                             %}
{%      endif                                                                %}
{%    endfor                                                                 %}
{%  endfor                                                                   %}
{% endfor                                                                    %}
{# do an aggregation of all the test results                                 #}
      }
      publishers {
          archiveJunit('**/results.xml') {
              retainLongStdout(true)
              testDataPublishers {
                  allowClaimingOfFailedTests()
                  publishTestAttachments()
                  publishTestStabilityData()
                  publishFlakyTestsReport()
              }
          }
{# do an aggregation of all the coverage results                             #}
          cobertura('**/coverage.xml') {
            onlyStable(false)
            failUnhealthy(true)
            failUnstable(true)
            failNoReports(false)
          }
      }
  }
}
