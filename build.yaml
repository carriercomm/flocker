# To modify an existing job, simply update the jobs_type: dictionary
# commit, push
# Then click 'deploy' on the jenkins job related to this repository
# available on the jenkins homepage.

project: 'ClusterHQ/flocker'
git_url: 'https://github.com/ClusterHQ/flocker.git'

# common_cli contains YAML aliases for common cli operations
# used during the build process
common_cli:
  hashbang: &hashbang |
    #!/bin/bash
    set -x
    set -e

  cleanup: &cleanup |
    export PATH=/usr/local/bin:$PATH
    # clean up the stuff from previous runs
    # due to the length of the jobname workspace, we are hitting limits in
    # our sheebang path name in pip.
    # So we will place the virtualenv in /tmp/v instead
    sudo rm -rf /tmp/v
    sudo rm -f results.xml
    sudo rm -f trial.log
    sudo rm -rf _trial_temp/

  setup_venv: &setup_venv |
    # setup the new venv
    virtualenv -p python2.7 --clear /tmp/v
    . /tmp/v/bin/activate

  setup_pip_cache: &setup_pip_cache |
    . /tmp/pip.sh

  setup_flocker_modules: &setup_flocker_modules |
    pip install --upgrade pip
    pip install -i \$PIP_INDEX_URL . --trusted-host \$TRUSTED_HOST
    pip install -i \$PIP_INDEX_URL "Flocker[doc,dev,release]" --trusted-host \$TRUSTED_HOST
    pip install -i \$PIP_INDEX_URL python-subunit junitxml  --trusted-host \$TRUSTED_HOST

  setup_aws_env_vars: &setup_aws_env_vars |
    # set vars and run tests
    export FLOCKER_FUNCTIONAL_TEST_CLOUD_CONFIG_FILE=/tmp/acceptance.yml
    export FLOCKER_FUNCTIONAL_TEST_AWS_AVAILABILITY_ZONE=us-west-2c
    export FLOCKER_FUNCTIONAL_TEST_CLOUD_PROVIDER=aws

  setup_coverage: &setup_coverage |
    pip install coverage==3.7.1 http://data.hybridcluster.net/python/coverage_reporter-0.01_hl0-py27-none-any.whl  --trusted-host \$TRUSTED_HOST

  run_coverage: &run_coverage |
    coverage xml --include=flocker*

  convert_results_to_junit: &convert_results_to_junit |
    cat trial.log | subunit-1to2 | subunit2junitxml --no-passthrough --output-to=results.xml

  run_sphinx: &run_sphinx |
    python setup.py --version
    cd docs
    set +e #don't abort at the first failure
    let status=0
    sphinx-build -d _build/doctree -b spelling . _build/spelling
    let status=status+\$?
    sphinx-build -d _build/doctree -b linkcheck . _build/linkcheck
    let status=status+\$?
    sphinx-build -d _build/doctree -b html . _build/html
    exit \$status
    # upload html
    #link-release-documentation
    #upload-release-documentation
    cd -

  flocker_artifacts: &flocker_artifacts
    - results.xml
    - _trial_temp/test.log
    - coverage.xml

  run_trial_with_coverage: &run_trial_with_coverage |
    # Consume the MODULE parameter set in the job configuration
    coverage run /tmp/v/bin/trial --reporter=subunit \$MODULE 2>&1 | tee trial.log

  setup_authentication: &setup_authentication |
    # acceptance tests rely on this file existing
    touch \$HOME/.ssh/known_hosts
    # remove existing keys
    rm -f \$HOME/.ssh/id_rsa*
    cp /tmp/id_rsa \$HOME/.ssh/id_rsa
    chmod -R 0700 \$HOME/.ssh
    ssh-keygen -N '' -f \$HOME/.ssh/id_rsa_flocker
    eval `ssh-agent -s`
    ssh-add \$HOME/.ssh/id_rsa

  run_acceptance_tests: &run_acceptance_tests |
    # we gather the return code, but make sure we come out of these tests with '0'
    /tmp/v/bin/python admin/run-acceptance-tests --distribution \${DISTRIBUTION_NAME} --provider aws --dataset-backend aws --branch \${TRIGGERED_BRANCH} --build-server  http://\$(wget -qO- http://instance-data/latest/meta-data/public-ipv4)  --config-file /tmp/acceptance.yaml \${ACCEPTANCE_TEST_MODULE} ; RC=\$?

  disable_selinux: &disable_selinux |
    sudo setenforce 0

  check_version: &check_version |
    export FLOCKER_VERSION=\$(/tmp/v/bin/python setup.py --version)

  build_sdist: &build_sdist  |
    /tmp/v/bin/python setup.py sdist

  build_package: &build_package  |
    /tmp/v/bin/python admin/build-package --destination-path repo --distribution \$DISTRIBUTION_NAME /flocker/dist/Flocker-\${FLOCKER_VERSION}.tar.gz

  build_repo_metadata: &build_repo_metadata |
    # the acceptance tests look for a package in a yum repository,
    # we provide one by starting a webserver and pointing the tests
    # to look over there
    sudo rm -rf /usr/share/nginx/html/results/omnibus/\${TRIGGERED_BRANCH}/\${DISTRIBUTION_NAME}
    sudo mkdir -p /usr/share/nginx/html/results/omnibus/\${TRIGGERED_BRANCH}/\${DISTRIBUTION_NAME}
    sudo cp repo/* /usr/share/nginx/html/results/omnibus/\${TRIGGERED_BRANCH}/\${DISTRIBUTION_NAME}
    cd /usr/share/nginx/html/results/omnibus/\${TRIGGERED_BRANCH}/\${DISTRIBUTION_NAME}
    # create a repo on either centos or ubuntu
    test -e /home/ubuntu && sudo sh -c 'dpkg-scanpackages --multiversion . | gzip > Packages.gz'
    test -e /home/centos && sudo createrepo .
    cd -

  clean_packages: &clean_packages |
    # jenkins is unable to clean the git repository as some files are owned
    # by root, so we make sure we delete the repo files we created
    sudo rm -rf repo/

  exit_with_return_code_from_test: &exit_with_return_code_from_test |
    exit \$RC

# the job definitions, they consume the aliases defined in the common_cli block
#
# flocker.node.functional is hanging, so we don't run it
job_type:
  run_trial:
  # http://build.clusterhq.com/builders/flocker-centos-7
    run_trial_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-T2Micro'
      with_modules:
        - flocker.acceptance
        - flocker.ca.functional
        - flocker.ca.test
        - flocker.cli
        - flocker.common
        - flocker.control
        - flocker.node.agents
        - flocker.node.test
        # TODO:
        # one of the functional tests is hanging, so we split the functional
        # tests and comment out the subset that is hanging
        # - flocker.node.functional
        # - flocker.node.functional.test_docker
        - flocker.node.functional.test_script
        - flocker.node.functional.test_deploy
        - flocker.provision
        - flocker.restapi
        - flocker.route
        - flocker.test
        - flocker.testtools
        - flocker.volume
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                   *run_trial_with_coverage, *run_coverage,
                   *convert_results_to_junit ]
          }
      archive_artifacts: *flocker_artifacts
      coverage_report: true

# http://build.clusterhq.com/builders/flocker-admin
# http://build.clusterhq.com/builders/flocker-ubuntu-14.04
    run_trial_on_AWS_Ubuntu_Trusty:
      on_nodes_with_labels: 'aws-ubuntu-trusty-T1Micro'
      with_modules:
        - admin
        - flocker.acceptance
        - flocker.ca.functional
        - flocker.ca.test
        - flocker.cli
        - flocker.common
        - flocker.control
        - flocker.node.agents
        - flocker.node.test
        # TODO:
        # one of the functional tests is hanging, so we split the functional
        # tests and comment out the subset that is hanging
        # - flocker.node.functional
        # - flocker.node.functional.test_docker
        - flocker.node.functional.test_script
        - flocker.node.functional.test_deploy
        - flocker.provision
        - flocker.restapi
        - flocker.route
        - flocker.test
        - flocker.testtools
        - flocker.volume
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules, *setup_coverage, *setup_aws_env_vars,
                   *run_trial_with_coverage, *run_coverage,
                   *convert_results_to_junit ]
          }
      archive_artifacts: *flocker_artifacts
      coverage_report: true

  # http://build.clusterhq.com/builders/flocker-docs
  run_sphinx:
    run_sphinx:
      on_nodes_with_labels: 'aws-centos-7-T2Micro'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules, *setup_aws_env_vars,
                   *run_sphinx ]
          }

  # http://build.clusterhq.com/builders/flocker%2Facceptance%2Faws%2Fcentos-7%2Faws
  run_acceptance:
    run_acceptance_end_to_end_dataset_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version, *disable_selinux,
                   'export DISTRIBUTION_NAME=centos-7',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.endtoend.test_dataset',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }
    run_acceptance_integration_mongodb_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version, *disable_selinux,
                   'export DISTRIBUTION_NAME=centos-7',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.integration.test_mongodb',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }
    run_acceptance_integration_postgres_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version, *disable_selinux,
                   'export DISTRIBUTION_NAME=centos-7',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.integration.test_postgres',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }
    run_acceptance_obsolete_cli_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version, *disable_selinux,
                   'export DISTRIBUTION_NAME=centos-7',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.obsolete.test_cli',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }
    run_acceptance_obsolete_containers_on_AWS_CentOS_7:
      on_nodes_with_labels: 'aws-centos-7-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version, *disable_selinux,
                   'export DISTRIBUTION_NAME=centos-7',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.obsolete.test_containers',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }
    run_acceptance_obsolete_containers_on_AWS_Ubuntu_Trusty:
      on_nodes_with_labels: 'aws-ubuntu-trusty-M3Medium'
      with_steps:
        - { type: 'shell',
            cli: [ *hashbang, *setup_pip_cache,
                   *cleanup, *setup_venv, *setup_flocker_modules,
                   *setup_aws_env_vars, *check_version,
                   'export DISTRIBUTION_NAME=ubuntu-14.04',
                   *build_sdist, *build_package,
                   *build_repo_metadata,
                   *setup_authentication,
                   'export ACCEPTANCE_TEST_MODULE=flocker.acceptance.obsolete.test_containers',
                   *run_acceptance_tests,
                   *clean_packages,
                   *exit_with_return_code_from_test ]
          }

